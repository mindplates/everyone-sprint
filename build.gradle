plugins {
    id 'org.springframework.boot' version '2.5.12'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'war'
}

group = 'com.mindplates'
version = '0.5.0-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.session:spring-session-data-redis'

    implementation 'io.springfox:springfox-boot-starter:3.0.0'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
}

test {
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}

def webappDir = "$projectDir/app"
def fileName = "${rootProject.name}-${version}"

sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/build", "$projectDir/src/main/resources"]
        }
    }
}

processResources {
    dependsOn "copyWebApp"
}

task copyWebApp(type: Copy) {
    dependsOn "deletePreBuildWebApp"
    from "$webappDir/build"
    into "$projectDir/src/main/resources/static"
}

task deletePreBuildWebApp(type: Delete) {
    dependsOn "buildReact"
    delete files("$projectDir/src/main/resources/static")
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task installReact(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install'
    } else {
        commandLine "npm", "audit", "fix"
        commandLine 'npm', 'install'
    }
}

tasks.bootWar.doLast {
    mkdir "$buildDir/release"
    mkdir "$buildDir/dist"
    copy {
        from "$projectDir/files/application.properties"
        into "$buildDir/release/"
    }
    copy {
        from "$projectDir/files/start.sh"
        into "$buildDir/release/"
    }
    copy {
        from "$projectDir/files/start.bat"
        into "$buildDir/release/"
    }

    copy {
        from "$buildDir/libs/${fileName}.war"
        into "$buildDir/release/"
    }
}

task packageDistribution(type: Zip) {
    archiveFileName = "${fileName}.zip"
    destinationDirectory = file("$buildDir/dist")
    from "$buildDir/release"
}

